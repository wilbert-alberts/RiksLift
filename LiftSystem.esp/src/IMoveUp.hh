// Generated by dzn code from IMoveUp.dzn
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#include "ITimer.hh"
#include "IMotor.hh"
#include "IDestinationSensor.hh"
#include "IPlanner.hh"
#ifndef IMOVEUP_HH
#define IMOVEUP_HH
struct IMoveUp
{
  enum struct State
    {
      IDLE,MOVING,ABORTING
    };
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> moveUp;
      dzn::in::event<void ()> abort;
    } in;
  struct
    {
      dzn::out::event<void ()> moveFinished;
      dzn::out::event<void ()> moveAborted;
      dzn::out::event<void ()> moveFailed;
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  ::IMoveUp::State state;
  IMoveUp (dzn::port::meta const& m);
  template <typename Component>
  IMoveUp (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
  , state (::IMoveUp::State::IDLE)
    {
      in.moveUp.set (that, this, "moveUp");
      in.abort.set (that, this, "abort");
      out.moveFinished.set (that, this, "moveFinished");
      out.moveAborted.set (that, this, "moveAborted");
      out.moveFailed.set (that, this, "moveFailed");
    }
  virtual ~IMoveUp ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::IMoveUp& provide, ::IMoveUp& require)
    {
      provide.out.moveFinished = require.out.moveFinished;
      provide.out.moveAborted = require.out.moveAborted;
      provide.out.moveFailed = require.out.moveFailed;
      require.in.moveUp = provide.in.moveUp;
      require.in.abort = provide.in.abort;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // IMOVEUP_HH
// version 2.18.2
