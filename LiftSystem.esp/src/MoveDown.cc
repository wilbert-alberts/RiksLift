// Generated by dzn code from MoveDown.dzn
#include "MoveDown.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
MoveDown::MoveDown (dzn::locator const& locator)
: dzn_meta ({"MoveDown","MoveDown",0,  {},  {},  {[this] ()
        {
          p.dzn_check_bindings ();
        }, [this] ()
        {
          timer.dzn_check_bindings ();
        }, [this] ()
        {
          fastDestinationSensor.dzn_check_bindings ();
        }, [this] ()
        {
          slowDestinationSensor.dzn_check_bindings ();
        }, [this] ()
        {
          positionSensor.dzn_check_bindings ();
        }, [this] ()
        {
          motor.dzn_check_bindings ();
        }, [this] ()
        {
          planner.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, state (::MoveDown::State::IDLE)
, p ({  {"p",&p,this,&dzn_meta},  {"p",0,0,0}},this)
, timer ({  {"timer",0,0,0},  {"timer",&timer,this,&dzn_meta}},this)
, fastDestinationSensor ({  {"fastDestinationSensor",0,0,0},  {"fastDestinationSensor",&fastDestinationSensor,this,&dzn_meta}},this)
, slowDestinationSensor ({  {"slowDestinationSensor",0,0,0},  {"slowDestinationSensor",&slowDestinationSensor,this,&dzn_meta}},this)
, positionSensor ({  {"positionSensor",0,0,0},  {"positionSensor",&positionSensor,this,&dzn_meta}},this)
, motor ({  {"motor",0,0,0},  {"motor",&motor,this,&dzn_meta}},this)
, planner ({  {"planner",0,0,0},  {"planner",&planner,this,&dzn_meta}},this)
{
  this->dzn_meta.require =   {&timer.dzn_meta,&fastDestinationSensor.dzn_meta,&slowDestinationSensor.dzn_meta,&positionSensor.dzn_meta,&motor.dzn_meta,&planner.dzn_meta};
  this->dzn_runtime.performs_flush (this) = true;
  this->p.in.moveDown = [this] ()
    {
      this->dzn_out_p = &this->p.in.moveDown.dzn_out_binding;
      this->p_moveDown ();
    };
  this->p.in.abort = [this] ()
    {
      this->dzn_out_p = &this->p.in.abort.dzn_out_binding;
      this->p_abort ();
    };
  this->timer.out.timerElapsed = [this] ()
    {
      this->timer_timerElapsed ();
    };
  this->fastDestinationSensor.out.destinationReached = [this] ()
    {
      this->fastDestinationSensor_destinationReached ();
    };
  this->slowDestinationSensor.out.destinationReached = [this] ()
    {
      this->slowDestinationSensor_destinationReached ();
    };
}
void
MoveDown::p_moveDown ()
{
  if (this->state == ::MoveDown::State::IDLE)
    {
      this->positionSensor.in.getCurrentPosition (this->currentPosition);
      this->planner.in.getMoveDownFastPlanning (this->currentPosition, this->fastDelay, this->fastPosition);
      this->planner.in.getMoveDownSlowPlanning (this->currentPosition, this->slowDelay, this->slowPosition);
      this->timer.in.setTimer (fastDelay.plus(slowDelay));
      this->fastDestinationSensor.in.setDestination (this->fastPosition);
      this->slowDestinationSensor.in.setDestination (this->slowPosition);
      this->motor.in.moveDownFast ();
      this->state = ::MoveDown::State::MOVING_FAST;
    }
  else if (!(this->state == ::MoveDown::State::IDLE)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveDown::p_abort ()
{
  if (this->state == ::MoveDown::State::MOVING_FAST)
    {
      this->timer.in.cancelTimer ();
      this->fastDestinationSensor.in.cancelDestination ();
      this->slowDestinationSensor.in.cancelDestination ();
      this->motor.in.stop ();
      this->timer.in.setTimer (Delay(TIMEOUT_ABORT_WHILE_MOVING_FAST));
      this->state = ::MoveDown::State::ABORTING;
    }
  else if (this->state == ::MoveDown::State::MOVING_SLOW)
    {
      this->timer.in.cancelTimer ();
      this->slowDestinationSensor.in.cancelDestination ();
      this->motor.in.stop ();
      this->timer.in.setTimer (Delay(TIMEOUT_ABORT_WHILE_MOVING_SLOW));
      this->state = ::MoveDown::State::ABORTING;
    }
  else if (this->state == ::MoveDown::State::STOPPING)
    {
      this->state = ::MoveDown::State::ABORTING;
    }
  else if (this->state == ::MoveDown::State::FAILING_STOPPING)
    {
      this->state = ::MoveDown::State::ABORTING_STOPPING;
    }
  else if (!(this->state == ::MoveDown::State::FAILING_STOPPING) && (!(this->state == ::MoveDown::State::STOPPING) && (!(this->state == ::MoveDown::State::MOVING_SLOW) && !(this->state == ::MoveDown::State::MOVING_FAST)))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveDown::timer_timerElapsed ()
{
  if (this->state == ::MoveDown::State::STOPPING)
    {
      this->p.out.moveFinished ();
      this->state = ::MoveDown::State::IDLE;
    }
  else if (this->state == ::MoveDown::State::ABORTING)
    {
      this->p.out.moveAborted ();
      this->state = ::MoveDown::State::IDLE;
    }
  else if (this->state == ::MoveDown::State::MOVING_FAST)
    {
      this->motor.in.stop ();
      this->fastDestinationSensor.in.cancelDestination ();
      this->slowDestinationSensor.in.cancelDestination ();
      this->timer.in.setTimer (Delay(TIMEOUT_STOPPING_AFTER_FAILING));
      this->state = ::MoveDown::State::FAILING_STOPPING;
    }
  else if (this->state == ::MoveDown::State::MOVING_SLOW)
    {
      this->motor.in.stop ();
      this->slowDestinationSensor.in.cancelDestination ();
      this->timer.in.setTimer (Delay(TIMEOUT_STOPPING_AFTER_FAILING));
      this->state = ::MoveDown::State::FAILING_STOPPING;
    }
  else if (this->state == ::MoveDown::State::FAILING_STOPPING)
    {
      this->p.out.moveFailed ();
      this->state = ::MoveDown::State::IDLE;
    }
  else if (this->state == ::MoveDown::State::ABORTING_STOPPING)
    {
      this->p.out.moveAborted ();
      this->state = ::MoveDown::State::IDLE;
    }
  else if (!(this->state == ::MoveDown::State::ABORTING_STOPPING) && (!(this->state == ::MoveDown::State::FAILING_STOPPING) && (!(this->state == ::MoveDown::State::MOVING_SLOW) && (!(this->state == ::MoveDown::State::MOVING_FAST) && (!(this->state == ::MoveDown::State::ABORTING) && !(this->state == ::MoveDown::State::STOPPING)))))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveDown::fastDestinationSensor_destinationReached ()
{
  if (this->state == ::MoveDown::State::MOVING_FAST)
    {
      this->motor.in.moveDownSlow ();
      this->state = ::MoveDown::State::MOVING_SLOW;
    }
  else if (!(this->state == ::MoveDown::State::MOVING_FAST)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveDown::slowDestinationSensor_destinationReached ()
{
  if (this->state == ::MoveDown::State::MOVING_SLOW)
    {
      this->motor.in.stop ();
      this->timer.in.cancelTimer ();
      this->timer.in.setTimer (TIMEOUT_STOP_WHILE_MOVING_SLOW);
      this->state = ::MoveDown::State::STOPPING;
    }
  else if (this->state == ::MoveDown::State::MOVING_FAST)
    {
      this->motor.in.stop ();
      this->timer.in.cancelTimer ();
      this->fastDestinationSensor.in.cancelDestination ();
      this->timer.in.setTimer (Delay(TIMEOUT_STOPPING_AFTER_FAILING));
      this->state = ::MoveDown::State::FAILING_STOPPING;
    }
  else if (!(this->state == ::MoveDown::State::MOVING_FAST) && !(this->state == ::MoveDown::State::MOVING_SLOW)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
// version 2.18.2
