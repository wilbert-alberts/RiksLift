// Generated by dzn code from IMotor.dzn
#include "IMotor.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
IMotor::IMotor (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
{}
IMotor::~IMotor ()= default;
void
IMotor::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IMotor::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 1526479392u:
      //0:moveDownFast
      dzn_state = 1;
      break;
      case 1098583163u:
      //0:moveDownSlow
      dzn_state = 1;
      break;
      case 4048544199u:
      //0:moveUpFast
      dzn_state = 1;
      break;
      case 1120245250u:
      //0:moveUpSlow
      dzn_state = 1;
      break;
      case 672452365u:
      //0:stop
      dzn_state = 1;
      break;
      case 632232382u:
      //1:return
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IMotor::dzn_check_bindings ()
{
  if (!this->in.moveUpFast) throw dzn::binding_error (this->dzn_meta, "in.moveUpFast");
  if (!this->in.moveUpSlow) throw dzn::binding_error (this->dzn_meta, "in.moveUpSlow");
  if (!this->in.moveDownFast) throw dzn::binding_error (this->dzn_meta, "in.moveDownFast");
  if (!this->in.moveDownSlow) throw dzn::binding_error (this->dzn_meta, "in.moveDownSlow");
  if (!this->in.stop) throw dzn::binding_error (this->dzn_meta, "in.stop");
}
namespace dzn
{
}
// version 2.18.2
