// Generated by dzn code from ILog.dzn
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef ILOG_HH
#define ILOG_HH
struct ILog
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void (std::string msg)> logMsg;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  ILog (dzn::port::meta const& m);
  template <typename Component>
  ILog (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.logMsg.set (that, this, "logMsg");
    }
  virtual ~ILog ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::ILog& provide, ::ILog& require)
    {
      require.in.logMsg = provide.in.logMsg;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // ILOG_HH
// version 2.18.2
