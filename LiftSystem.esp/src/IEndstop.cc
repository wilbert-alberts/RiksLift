// Generated by dzn code from IEndstop.dzn
#include "IEndstop.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
IEndstop::IEndstop (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
, state (::IEndstop::State::UNKNOWN)
{}
IEndstop::~IEndstop ()= default;
void
IEndstop::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IEndstop::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 1607127700u:
      //0:getState
      dzn_state = 1;
      break;
      case 1120249497u:
      //1:State:INSIDE
      dzn_state = 6;
      state = IEndstop::State::INSIDE;
      break;
      case 1228302475u:
      //1:State:OUTSIDE
      dzn_state = 2;
      state = IEndstop::State::OUTSIDE;
      break;
      case 384172979u:
      //2:entering
      dzn_state = 6;
      state = IEndstop::State::INSIDE;
      break;
      case 1607127858u:
      //2:getState
      dzn_state = 4;
      break;
      case 1120249655u:
      //3:State:INSIDE
      dzn_state = 6;
      state = IEndstop::State::INSIDE;
      break;
      case 1228302712u:
      //4:State:OUTSIDE
      dzn_state = 2;
      state = IEndstop::State::OUTSIDE;
      break;
      case 2184821070u:
      //6:exiting
      dzn_state = 2;
      state = IEndstop::State::OUTSIDE;
      break;
      case 1607128174u:
      //6:getState
      dzn_state = 3;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IEndstop::dzn_check_bindings ()
{
  if (!this->in.getState) throw dzn::binding_error (this->dzn_meta, "in.getState");
  if (!this->out.entering) throw dzn::binding_error (this->dzn_meta, "out.entering");
  if (!this->out.exiting) throw dzn::binding_error (this->dzn_meta, "out.exiting");
}
namespace dzn
{
}
namespace dzn
{
  char const*
  to_cstr (::IEndstop::State v)
    {
      switch (v)
        {
          case ::IEndstop::State::UNKNOWN: return "State:UNKNOWN";
          case ::IEndstop::State::INSIDE: return "State:INSIDE";
          case ::IEndstop::State::INSIDE_EXPECTING: return "State:INSIDE_EXPECTING";
          case ::IEndstop::State::OUTSIDE: return "State:OUTSIDE";
          case ::IEndstop::State::OUTSIDE_EXPECTING: return "State:OUTSIDE_EXPECTING";
        }
      return "";
    }
  template <>
  std::string
  to_string (::IEndstop::State v)
    {
      return to_cstr (v);
    }
}
namespace dzn
{
  ::IEndstop::State
  to_IEndstop_State (std::string s)
    {
      static std::map<std::string, ::IEndstop::State> m =   {
            {"State:UNKNOWN", ::IEndstop::State::UNKNOWN},
            {"State:INSIDE", ::IEndstop::State::INSIDE},
            {"State:INSIDE_EXPECTING", ::IEndstop::State::INSIDE_EXPECTING},
            {"State:OUTSIDE", ::IEndstop::State::OUTSIDE},
            {"State:OUTSIDE_EXPECTING", ::IEndstop::State::OUTSIDE_EXPECTING}};
      return m.at (s);
    }
}
// version 2.18.2
