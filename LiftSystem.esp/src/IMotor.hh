// Generated by dzn code from IMotor.dzn
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef IMOTOR_HH
#define IMOTOR_HH
struct IMotor
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> moveUpFast;
      dzn::in::event<void ()> moveUpSlow;
      dzn::in::event<void ()> moveDownFast;
      dzn::in::event<void ()> moveDownSlow;
      dzn::in::event<void ()> stop;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  IMotor (dzn::port::meta const& m);
  template <typename Component>
  IMotor (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.moveUpFast.set (that, this, "moveUpFast");
      in.moveUpSlow.set (that, this, "moveUpSlow");
      in.moveDownFast.set (that, this, "moveDownFast");
      in.moveDownSlow.set (that, this, "moveDownSlow");
      in.stop.set (that, this, "stop");
    }
  virtual ~IMotor ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::IMotor& provide, ::IMotor& require)
    {
      require.in.moveUpFast = provide.in.moveUpFast;
      require.in.moveUpSlow = provide.in.moveUpSlow;
      require.in.moveDownFast = provide.in.moveDownFast;
      require.in.moveDownSlow = provide.in.moveDownSlow;
      require.in.stop = provide.in.stop;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // IMOTOR_HH
// version 2.18.2
