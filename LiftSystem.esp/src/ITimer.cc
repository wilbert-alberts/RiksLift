// Generated by dzn code from ITimer.dzn
#include "ITimer.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
ITimer::ITimer (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
, state (::ITimer::State::IDLE)
{}
ITimer::~ITimer ()= default;
void
ITimer::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
ITimer::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 1564075628u:
      //0:setTimer
      dzn_state = 4;
      break;
      case 632232382u:
      //1:return
      dzn_state = 0;
      state = ITimer::State::IDLE;
      break;
      case 1950366841u:
      //2:cancelTimer
      dzn_state = 1;
      break;
      case 1767007846u:
      //2:timerElapsed
      dzn_state = 0;
      state = ITimer::State::IDLE;
      break;
      case 632232619u:
      //4:return
      dzn_state = 2;
      state = ITimer::State::ARMED;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
ITimer::dzn_check_bindings ()
{
  if (!this->in.setTimer) throw dzn::binding_error (this->dzn_meta, "in.setTimer");
  if (!this->in.cancelTimer) throw dzn::binding_error (this->dzn_meta, "in.cancelTimer");
  if (!this->out.timerElapsed) throw dzn::binding_error (this->dzn_meta, "out.timerElapsed");
}
namespace dzn
{
}
// version 2.18.2
