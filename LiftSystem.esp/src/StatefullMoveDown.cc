// Generated by dzn code from StatefullMoveDown.dzn
#include "StatefullMoveDown.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
SMoveDown::SMoveDown (dzn::locator const& locator)
: dzn_meta ({"SMoveDown","SMoveDown",0,  {},  {},  {[this] ()
        {
          p.dzn_check_bindings ();
        }, [this] ()
        {
          homedMove.dzn_check_bindings ();
        }, [this] ()
        {
          regularMove.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, homedState (::SMoveDown::HomedState::NOT_HOMED)
, moveState (::SMoveDown::MoveState::IDLE)
, p ({  {"p",&p,this,&dzn_meta},  {"p",0,0,0}},this)
, homedMove ({  {"homedMove",0,0,0},  {"homedMove",&homedMove,this,&dzn_meta}},this)
, regularMove ({  {"regularMove",0,0,0},  {"regularMove",&regularMove,this,&dzn_meta}},this)
{
  this->dzn_meta.require =   {&homedMove.dzn_meta,&regularMove.dzn_meta};
  this->dzn_runtime.performs_flush (this) = true;
  this->p.in.moveDown = [this] ()
    {
      this->dzn_out_p = &this->p.in.moveDown.dzn_out_binding;
      this->p_moveDown ();
    };
  this->p.in.abort = [this] ()
    {
      this->dzn_out_p = &this->p.in.abort.dzn_out_binding;
      this->p_abort ();
    };
  this->homedMove.out.moveFinished = [this] ()
    {
      this->homedMove_moveFinished ();
    };
  this->homedMove.out.moveAborted = [this] ()
    {
      this->homedMove_moveAborted ();
    };
  this->homedMove.out.moveFailed = [this] ()
    {
      this->homedMove_moveFailed ();
    };
  this->regularMove.out.moveFinished = [this] ()
    {
      this->regularMove_moveFinished ();
    };
  this->regularMove.out.moveAborted = [this] ()
    {
      this->regularMove_moveAborted ();
    };
  this->regularMove.out.moveFailed = [this] ()
    {
      this->regularMove_moveFailed ();
    };
}
void
SMoveDown::p_moveDown ()
{
  if ((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::IDLE))
    {
      this->homedMove.in.moveDown ();
      this->moveState = ::SMoveDown::MoveState::MOVING;
    }
  else if ((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::IDLE))
    {
      this->regularMove.in.moveDown ();
      this->moveState = ::SMoveDown::MoveState::MOVING;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::IDLE)) && !((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::IDLE))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
SMoveDown::p_abort ()
{
  if ((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))
    {
      this->homedMove.in.abort ();
      this->moveState = ::SMoveDown::MoveState::ABORTING;
    }
  else if ((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))
    {
      this->regularMove.in.abort ();
      this->moveState = ::SMoveDown::MoveState::ABORTING;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING)) && !((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
SMoveDown::homedMove_moveFinished ()
{
  if ((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))
    {
      this->p.out.moveFinished ();
      this->moveState = ::SMoveDown::MoveState::IDLE;
      this->homedState = ::SMoveDown::HomedState::HOMED;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
SMoveDown::homedMove_moveAborted ()
{
  if ((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::ABORTING))
    {
      this->p.out.moveAborted ();
      this->moveState = ::SMoveDown::MoveState::IDLE;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::ABORTING))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
SMoveDown::homedMove_moveFailed ()
{
  if ((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))
    {
      this->p.out.moveFailed ();
      this->moveState = ::SMoveDown::MoveState::IDLE;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::NOT_HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
SMoveDown::regularMove_moveFinished ()
{
  if ((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))
    {
      this->p.out.moveFinished ();
      this->moveState = ::SMoveDown::MoveState::IDLE;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
SMoveDown::regularMove_moveAborted ()
{
  if ((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::ABORTING))
    {
      this->p.out.moveAborted ();
      this->moveState = ::SMoveDown::MoveState::IDLE;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::ABORTING))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
SMoveDown::regularMove_moveFailed ()
{
  if ((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))
    {
      this->p.out.moveFailed ();
      this->moveState = ::SMoveDown::MoveState::IDLE;
      this->homedState = ::SMoveDown::HomedState::NOT_HOMED;
    }
  else if (!((this->homedState == ::SMoveDown::HomedState::HOMED) && (this->moveState == ::SMoveDown::MoveState::MOVING))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
// version 2.18.2
