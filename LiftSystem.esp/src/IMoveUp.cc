// Generated by dzn code from IMoveUp.dzn
#include "IMoveUp.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
IMoveUp::IMoveUp (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
, state (::IMoveUp::State::IDLE)
{}
IMoveUp::~IMoveUp ()= default;
void
IMoveUp::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IMoveUp::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 3747270931u:
      //0:moveUp
      dzn_state = 1;
      break;
      case 632232382u:
      //1:return
      dzn_state = 2;
      state = IMoveUp::State::MOVING;
      break;
      case 3709751054u:
      //2:abort
      dzn_state = 5;
      break;
      case 548029951u:
      //2:moveFailed
      dzn_state = 0;
      state = IMoveUp::State::IDLE;
      break;
      case 2016493930u:
      //2:moveFinished
      dzn_state = 0;
      state = IMoveUp::State::IDLE;
      break;
      case 2410837963u:
      //3:moveAborted
      dzn_state = 0;
      state = IMoveUp::State::IDLE;
      break;
      case 632232698u:
      //5:return
      dzn_state = 3;
      state = IMoveUp::State::ABORTING;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IMoveUp::dzn_check_bindings ()
{
  if (!this->in.moveUp) throw dzn::binding_error (this->dzn_meta, "in.moveUp");
  if (!this->in.abort) throw dzn::binding_error (this->dzn_meta, "in.abort");
  if (!this->out.moveFinished) throw dzn::binding_error (this->dzn_meta, "out.moveFinished");
  if (!this->out.moveAborted) throw dzn::binding_error (this->dzn_meta, "out.moveAborted");
  if (!this->out.moveFailed) throw dzn::binding_error (this->dzn_meta, "out.moveFailed");
}
namespace dzn
{
}
// version 2.18.2
