// Generated by dzn code from MoveUpDown.dzn
#include "MoveUpDown.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
MoveUpDown::MoveUpDown (dzn::locator const& locator)
: dzn_meta ({"MoveUpDown","MoveUpDown",0,  {},  {},  {[this] ()
        {
          p.dzn_check_bindings ();
        }, [this] ()
        {
          rUp.dzn_check_bindings ();
        }, [this] ()
        {
          rDown.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, state (::MoveUpDown::State::IDLE)
, p ({  {"p",&p,this,&dzn_meta},  {"p",0,0,0}},this)
, rUp ({  {"rUp",0,0,0},  {"rUp",&rUp,this,&dzn_meta}},this)
, rDown ({  {"rDown",0,0,0},  {"rDown",&rDown,this,&dzn_meta}},this)
{
  this->dzn_meta.require =   {&rUp.dzn_meta,&rDown.dzn_meta};
  this->dzn_runtime.performs_flush (this) = true;
  this->p.in.moveUp = [this] ()
    {
      this->dzn_out_p = &this->p.in.moveUp.dzn_out_binding;
      this->p_moveUp ();
    };
  this->p.in.moveDown = [this] ()
    {
      this->dzn_out_p = &this->p.in.moveDown.dzn_out_binding;
      this->p_moveDown ();
    };
  this->p.in.abort = [this] ()
    {
      this->dzn_out_p = &this->p.in.abort.dzn_out_binding;
      this->p_abort ();
    };
  this->rUp.out.moveFinished = [this] ()
    {
      this->rUp_moveFinished ();
    };
  this->rUp.out.moveAborted = [this] ()
    {
      this->rUp_moveAborted ();
    };
  this->rUp.out.moveFailed = [this] ()
    {
      this->rUp_moveFailed ();
    };
  this->rDown.out.moveFinished = [this] ()
    {
      this->rDown_moveFinished ();
    };
  this->rDown.out.moveAborted = [this] ()
    {
      this->rDown_moveAborted ();
    };
  this->rDown.out.moveFailed = [this] ()
    {
      this->rDown_moveFailed ();
    };
}
void
MoveUpDown::p_moveUp ()
{
  if (this->state == ::MoveUpDown::State::IDLE)
    {
      this->rUp.in.moveUp ();
      this->state = ::MoveUpDown::State::MOVING_UP;
    }
  else if (this->state == ::MoveUpDown::State::DOWN)
    {
      this->rUp.in.moveUp ();
      this->state = ::MoveUpDown::State::MOVING_UP;
    }
  else if (!(this->state == ::MoveUpDown::State::DOWN) && !(this->state == ::MoveUpDown::State::IDLE)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::p_moveDown ()
{
  if (this->state == ::MoveUpDown::State::IDLE)
    {
      this->rDown.in.moveDown ();
      this->state = ::MoveUpDown::State::MOVING_DOWN;
    }
  else if (this->state == ::MoveUpDown::State::UP)
    {
      this->rDown.in.moveDown ();
      this->state = ::MoveUpDown::State::MOVING_DOWN;
    }
  else if (!(this->state == ::MoveUpDown::State::UP) && !(this->state == ::MoveUpDown::State::IDLE)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::p_abort ()
{
  if (this->state == ::MoveUpDown::State::IDLE)   {}
  else if (this->state == ::MoveUpDown::State::MOVING_UP)
    {
      this->rUp.in.abort ();
      this->state = ::MoveUpDown::State::ABORTING;
    }
  else if (this->state == ::MoveUpDown::State::MOVING_DOWN)
    {
      this->rDown.in.abort ();
      this->state = ::MoveUpDown::State::ABORTING;
    }
  else if (this->state == ::MoveUpDown::State::DOWN)   {}
  else if (this->state == ::MoveUpDown::State::UP)   {}
  else if (!(this->state == ::MoveUpDown::State::UP) && (!(this->state == ::MoveUpDown::State::DOWN) && (!(this->state == ::MoveUpDown::State::MOVING_DOWN) && (!(this->state == ::MoveUpDown::State::MOVING_UP) && !(this->state == ::MoveUpDown::State::IDLE))))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::rUp_moveFinished ()
{
  if (this->state == ::MoveUpDown::State::MOVING_UP)
    {
      this->p.out.moveFinished ();
      this->state = ::MoveUpDown::State::UP;
    }
  else if (!(this->state == ::MoveUpDown::State::MOVING_UP)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::rUp_moveAborted ()
{
  if (this->state == ::MoveUpDown::State::ABORTING)
    {
      this->p.out.moveAborted ();
      this->state = ::MoveUpDown::State::IDLE;
    }
  else if (!(this->state == ::MoveUpDown::State::ABORTING)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::rUp_moveFailed ()
{
  if (this->state == ::MoveUpDown::State::MOVING_UP)
    {
      this->p.out.moveFailed ();
      this->state = ::MoveUpDown::State::IDLE;
    }
  else if (!(this->state == ::MoveUpDown::State::MOVING_UP)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::rDown_moveFinished ()
{
  if (this->state == ::MoveUpDown::State::MOVING_DOWN)
    {
      this->p.out.moveFinished ();
      this->state = ::MoveUpDown::State::DOWN;
    }
  else if (!(this->state == ::MoveUpDown::State::MOVING_DOWN)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::rDown_moveAborted ()
{
  if (this->state == ::MoveUpDown::State::ABORTING)
    {
      this->p.out.moveAborted ();
      this->state = ::MoveUpDown::State::IDLE;
    }
  else if (!(this->state == ::MoveUpDown::State::ABORTING)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
void
MoveUpDown::rDown_moveFailed ()
{
  if (this->state == ::MoveUpDown::State::MOVING_DOWN)
    {
      this->p.out.moveFailed ();
      this->state = ::MoveUpDown::State::IDLE;
    }
  else if (!(this->state == ::MoveUpDown::State::MOVING_DOWN)) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
// version 2.18.2
