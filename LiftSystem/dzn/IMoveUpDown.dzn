
interface IMoveUpDown {
    in void moveUp();
    in void moveDown();
    in void abort();

    out void moveFinished();
    out void moveAborted();
    out void moveFailed();

    behavior {
        enum State { IDLE, MOVING_UP, UP, MOVING_DOWN, DOWN, ABORTING };
        State state = State.IDLE;

        [ state.IDLE ] on moveUp: { state = State.MOVING_UP; }
        [ state.IDLE ] on moveDown: { state = State.MOVING_DOWN; }
        [ state.IDLE ] on abort: { /* race condition, ignore */  }
        
        [ state.MOVING_UP ] on inevitable: { moveFinished; state = State.UP; }
        [ state.MOVING_UP ] on inevitable: { moveFailed; state = State.IDLE; }
        [ state.MOVING_UP ] on abort: { state = State.ABORTING; }

        [ state.MOVING_DOWN ] on inevitable: { moveFinished; state = State.DOWN; }
        [ state.MOVING_DOWN ] on inevitable: { moveFailed; state = State.IDLE; }
        [ state.MOVING_DOWN ] on abort: { state = State.ABORTING; }

        [ state.DOWN ] on moveUp: { state = State.MOVING_UP; }
        [ state.DOWN ] on abort: { /* Race condition: moveFinished might crossed abort on the way up, ignore */  }

        [ state.UP ]   on moveDown: { state = State.MOVING_DOWN; }
        [ state.UP ]   on abort: { /* Race condition: moveFinished might crossed abort on the way up, ignore */  }
        
        [ state.ABORTING ] on inevitable: { moveAborted; state = State.IDLE; }
    }
}