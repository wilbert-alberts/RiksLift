import ITimer.dzn;
import IMotor.dzn;
import IDestinationSensor.dzn;
import IPlanner.dzn;
import IMoveDown.dzn;
import IEndstop.dzn;

component HomeDown {

    provides IMoveDown p;
    requires ITimer rTimer;
    requires IEndstop rEndstop;
    requires IMotor rMotor;
    requires IDestinationSensor rPositionSensor;
    requires IPlanner rPlanner;

    behavior {
        enum State { IDLE, MOVING_FAST_DOWN, STOPPING_FAST_DOWN, MOVING_SLOW_UP, STOPPING_SLOW_UP, MOVING_SLOW_DOWN, ABORTING };
        State state = State.IDLE;
        ITimer.Delay delay;
        IPlanner.Position position;
        IEndstop.State es = IEndstop.State.UNKNOWN;

        [ state.IDLE ] on p.moveDown(): { 
            es = rEndstop.getState();
            if (es == IEndstop.State.INSIDE) {
                rMotor.moveUpSlow();
                state = State.MOVING_SLOW_UP;                    
            }
            else if (es == IEndstop.State.OUTSIDE) {
                rMotor.moveDownFast();
                state = State.MOVING_FAST_DOWN;                    
            }
        }
        [ state.MOVING_FAST_DOWN ] on rEndstop.entering(): {
            rMotor.stop();
            rTimer.setTimer($1.0$);
            state = State.STOPPING_FAST_DOWN;
        }
        [ state.STOPPING_FAST_DOWN ] on rTimer.timerElapsed(): {
            rMotor.moveUpSlow();
            state = State.MOVING_SLOW_UP;
        }
        [ state.MOVING_SLOW_UP ] on rEndstop.exiting(): {
            rTimer.setTimer($0.5$);
            state = State.STOPPING_SLOW_UP;
        }
        [ state.STOPPING_SLOW_UP ] on rTimer.timerElapsed(): {
            rMotor.stop();
            rMotor.moveDownSlow();
            state = State.MOVING_SLOW_DOWN;
        }
        [ state.MOVING_SLOW_DOWN ] on rEndstop.entering(): {
            rMotor.stop();
            rPositionSensor.getPosition(position);
            rPlanner.setEndstopDownPosition(position);
            p.moveFinished();
            state = State.IDLE;
        }

        [ state.MOVING_FAST_DOWN || state.MOVING_SLOW_UP || state.MOVING_SLOW_DOWN ] on p.abort(): {
            rMotor.stop();
            rTimer.setTimer($1.0$);
            state = State.ABORTING;
        }
        [ state.STOPPING_FAST_DOWN || state.STOPPING_SLOW_UP ] on p.abort(): {
            state = State.ABORTING;
        }

        [state.ABORTING] on rTimer.timerElapsed(): {
            p.moveAborted();
            state = State.IDLE;
        }
        [state.ABORTING] on rEndstop.entering(), rEndstop.exiting() : {
        }
 
        [ state.STOPPING_SLOW_UP || 
          state.STOPPING_FAST_DOWN || 
          state.MOVING_SLOW_UP ||
          state.IDLE 
        ] on rEndstop.entering(): {
            /* Should not happen */ 
        }
        [ state.IDLE || 
          state.STOPPING_FAST_DOWN || 
          state.STOPPING_SLOW_UP ||
          state.MOVING_SLOW_DOWN
        ]  on rEndstop.exiting(): {
            /* Should not happen */ 
        }
   }
}