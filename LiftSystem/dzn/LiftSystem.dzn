import StatefullMoveUp.dzn;
import StatefullMoveDown.dzn;
import HomeUp.dzn;
import HomeDown.dzn;
import MoveUp.dzn;
import MoveDown.dzn;
import MoveUpDown.dzn;
import MoveUpDownTopArmor.dzn;

import ForeignTimer.dzn;
import ForeignMotor.dzn;
import ForeignDestinationSensor.dzn;
import ForeignPlanner.dzn;
import ForeignEndstop.dzn;
import ForeignLog.dzn;
import ForeignPositionSensor.dzn;


component LiftSystem
{
    provides IMoveUpDownRelaxed p;

    system {
        MoveUpDownTopArmor mudArmor;
        FLog fLog;

        MoveUpDown mud;
        SMoveDown smd;
        SMoveUp smu;

        HomeDown hd;
        MoveDown rd;

        HomeUp hu;
        MoveUp ru;

        FDestinationSensor ruFastDestinationSensor;
        FDestinationSensor ruSlowDestinationSensor;
        FPositionSensor ruPositionSensor;
        FTimer ruTimer;
        FPlanner ruPlanner;
        FMotor ruMotor;

        FDestinationSensor rdFastDestinationSensor;
        FDestinationSensor rdSlowDestinationSensor;
        FPositionSensor rdPositionSensor;
        FTimer rdTimer;
        FPlanner rdPlanner;
        FMotor rdMotor;

        FMotor huMotor;
        FPlanner huPlanner;
        FPositionSensor huPositionSensor;
        FEndstop huEndstop;
        FTimer huTimer;

        FMotor hdMotor;
        FPlanner hdPlanner;
        FPositionSensor hdPositionSensor;
        FEndstop hdEndstop;
        FTimer hdTimer;

        mudArmor.p <=> p;
        mudArmor.rLog <=> fLog.p;

        mud.p <=> mudArmor.r;
        mud.rDown <=> smd.p;
        mud.rUp <=> smu.p;

        smd.regularMove <=> rd.p;
        smd.homedMove <=> hd.p;

        smu.regularMove <=> ru.p;
        smu.homedMove <=> hu.p;

        ru.motor <=> ruMotor.p;
        ru.timer <=> ruTimer.p;
        ru.positionSensor <=> ruPositionSensor.p;
        ru.fastDestinationSensor <=> ruFastDestinationSensor.p;
        ru.slowDestinationSensor <=> ruSlowDestinationSensor.p;
        ru.planner <=> ruPlanner.p;

        rd.motor <=> rdMotor.p;
        rd.timer <=> rdTimer.p;
        rd.positionSensor <=> rdPositionSensor.p;
        rd.fastDestinationSensor <=> rdFastDestinationSensor.p;
        rd.slowDestinationSensor <=> rdSlowDestinationSensor.p;
        rd.planner <=> rdPlanner.p;

        hu.motor <=> huMotor.p;
        hu.timer <=> huTimer.p;
        hu.endstop <=> huEndstop.p;
        hu.positionSensor <=> huPositionSensor.p;
        hu.planner <=> huPlanner.p;

        hd.motor <=> hdMotor.p;
        hd.timer <=> hdTimer.p;
        hd.endstop <=> hdEndstop.p;
        hd.positionSensor <=> hdPositionSensor.p;
        hd.planner <=> hdPlanner.p;

    }
}